{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.11", "generated_at": "2025-09-12T03:21:44.554010Z", "invocation_id": "8b97e207-9949-476a-8e8c-81452700dcce", "invocation_started_at": "2025-09-12T03:21:39.882755Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.270771Z", "completed_at": "2025-09-12T03:21:44.279963Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.280545Z", "completed_at": "2025-09-12T03:21:44.280566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011005163192749023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.stg_dataanalyst_intake", "compiled": true, "compiled_code": "\n\nwith raw as (\n  select\n    id_no,\n    \"timestamp\" as submitted_at,\n    age_range,\n    gender,\n    country,\n    referral_source,\n    years_experience,\n    track,\n    weekly_commitment,\n    main_aim,\n    motivation,\n    skill_level,\n    aptitude_test_completed,\n    total_score,\n    graduated\n  from \"postgres\".\"raw\".\"raw_dataanalyst_intake\"\n),\n\ncleaned as (\n  select\n    id_no,\n    submitted_at,\n    \n    -- Standardize age_range\n    case \n      when trim(lower(age_range)) like '%18-24%' then '18-24'\n      when trim(lower(age_range)) like '%25-34%' then '25-34'\n      when trim(lower(age_range)) like '%35-44%' then '35-44'\n      when trim(lower(age_range)) like '%45-54%' then '45-54'\n      when trim(lower(age_range)) like '%55%' then '55+'\n      else trim(age_range)\n    end as age_range,\n    \n    -- Standardize gender\n    case \n      when trim(lower(gender)) in ('male', 'm') then 'Male'\n      when trim(lower(gender)) in ('female', 'f') then 'Female'\n      when trim(lower(gender)) in ('other', 'prefer not to say', 'non-binary') then 'Other'\n      else nullif(trim(gender), '')\n    end as gender,\n    \n    -- Clean country\n    initcap(nullif(trim(country), '')) as country,\n    \n    -- Standardize referral_source to snake_case\n    case \n      when trim(lower(referral_source)) like '%word of mouth%' then 'word_of_mouth'\n      when trim(lower(referral_source)) like '%whatsapp%' then 'whatsapp'\n      when trim(lower(referral_source)) like '%facebook%' then 'facebook'\n      when trim(lower(referral_source)) like '%instagram%' then 'instagram'\n      when trim(lower(referral_source)) like '%linkedin%' then 'linkedin'\n      when trim(lower(referral_source)) like '%google%' then 'google_search'\n      when trim(lower(referral_source)) like '%website%' then 'website'\n      when trim(lower(referral_source)) like '%email%' then 'email'\n      when trim(lower(referral_source)) like '%social media%' then 'social_media'\n      else lower(replace(trim(referral_source), ' ', '_'))\n    end as referral_source,\n    \n    -- Categorize years_experience into standardized snake_case values\n    case \n      when trim(lower(years_experience)) like '%less than%six months%' or \n           trim(lower(years_experience)) like '%0-6 months%' or\n           trim(lower(years_experience)) = 'none' then 'less_than_6_months'\n      when trim(lower(years_experience)) like '%6 months%1 year%' or\n           trim(lower(years_experience)) like '%6-12 months%' then '6_months_1_year'\n      when trim(lower(years_experience)) like '%1-3 year%' or\n           trim(lower(years_experience)) like '%1 to 3 year%' or\n           trim(lower(years_experience)) like '%1-2 year%' then '1_3_years'\n      when trim(lower(years_experience)) like '%4-6 year%' or\n           trim(lower(years_experience)) like '%3-5 year%' or\n           trim(lower(years_experience)) like '%4 to 6 year%' then '4_6_years'\n      when trim(lower(years_experience)) like '%more than%' or\n           trim(lower(years_experience)) like '%7+%' or\n           trim(lower(years_experience)) like '%over%' then 'more_than_6_years'\n      else lower(replace(trim(years_experience), ' ', '_'))\n    end as years_experience,\n    \n    -- Standardize track to snake_case\n    case \n      when trim(lower(track)) like '%data science%' then 'data_science'\n      when trim(lower(track)) like '%data analytics%' then 'data_analytics'\n      when trim(lower(track)) like '%data analyst%' then 'data_analytics'\n      when trim(lower(track)) like '%machine learning%' then 'machine_learning'\n      when trim(lower(track)) like '%ai%' or trim(lower(track)) like '%artificial intelligence%' then 'artificial_intelligence'\n      when trim(lower(track)) like '%business intelligence%' then 'business_intelligence'\n      when trim(lower(track)) like '%business analyst%' then 'business_analytics'\n      else lower(replace(trim(track), ' ', '_'))\n    end as track,\n    \n    -- Categorize weekly_commitment into snake_case values\n    case \n      when trim(lower(weekly_commitment)) like '%less than%6%' or\n           trim(lower(weekly_commitment)) like '%under 6%' or\n           trim(lower(weekly_commitment)) like '%0-6%' then 'less_than_6_hours'\n      when trim(lower(weekly_commitment)) like '%6-10%' or\n           trim(lower(weekly_commitment)) like '%6 to 10%' then '6_10_hours'\n      when trim(lower(weekly_commitment)) like '%10-14%' or\n           trim(lower(weekly_commitment)) like '%10 to 14%' then '10_14_hours'\n      when trim(lower(weekly_commitment)) like '%more than 14%' or\n           trim(lower(weekly_commitment)) like '%over 14%' or\n           trim(lower(weekly_commitment)) like '%14+%' then 'more_than_14_hours'\n      else lower(replace(trim(weekly_commitment), ' ', '_'))\n    end as weekly_commitment,\n    \n    -- Standardize main_aim to snake_case with your specific categories\n    case \n      when trim(lower(main_aim)) like '%upskill%' then 'upskill'\n      when trim(lower(main_aim)) like '%build%project%portfolio%' or\n           trim(lower(main_aim)) like '%portfolio%' then 'build_project_portfolio'\n      when trim(lower(main_aim)) like '%learn%data%afresh%' or\n           trim(lower(main_aim)) like '%learn%from%scratch%' or\n           trim(lower(main_aim)) like '%start%learning%data%' then 'learn_data_afresh'\n      when trim(lower(main_aim)) like '%connect%fellow%data%professional%' or\n           trim(lower(main_aim)) like '%network%' or\n           trim(lower(main_aim)) like '%connect%professional%' then 'connect_with_professionals'\n      when trim(lower(main_aim)) like '%career change%' then 'career_change'\n      when trim(lower(main_aim)) like '%new career%' then 'career_change'\n      else lower(replace(trim(main_aim), ' ', '_'))\n    end as main_aim,\n    \n    -- Clean motivation (keep as is but trim)\n    nullif(trim(motivation), '') as motivation,\n    \n    -- Standardize skill_level into snake_case categories\n    case \n      when trim(lower(skill_level)) like '%beginner%' or\n           trim(lower(skill_level)) like '%no%experience%' or\n           trim(lower(skill_level)) like '%no learning%' then 'beginner'\n      when trim(lower(skill_level)) like '%elementary%' or\n           trim(lower(skill_level)) like '%basic%' or\n           trim(lower(skill_level)) like '%theoretical%' then 'elementary'\n      when trim(lower(skill_level)) like '%intermediate%' or\n           trim(lower(skill_level)) like '%some experience%' then 'intermediate'\n      when trim(lower(skill_level)) like '%advanced%' or\n           trim(lower(skill_level)) like '%expert%' then 'advanced'\n      else lower(replace(trim(skill_level), ' ', '_'))\n    end as skill_level,\n    \n    -- aptitude_test_completed is already text, clean it properly\n    case\n      when trim(lower(aptitude_test_completed)) in ('yes', 'true', '1', 'completed', 'done') then true\n      when trim(lower(aptitude_test_completed)) in ('no', 'false', '0', 'not completed', 'pending') then false\n      else null\n    end as aptitude_test_completed,\n    \n    -- total_score is already numeric, just ensure it's within reasonable bounds\n    case \n      when total_score >= 0 and total_score <= 100 then round(total_score::numeric, 2)\n      else null\n    end as total_score,\n    \n    -- graduated is already boolean, keep as is\n    coalesce(graduated, false) as graduated\n\n  from raw\n)\n\nselect * from cleaned", "relation_name": "\"postgres\".\"analytics\".\"stg_dataanalyst_intake\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.283880Z", "completed_at": "2025-09-12T03:21:44.287966Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.288531Z", "completed_at": "2025-09-12T03:21:44.288547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00632929801940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.stg_datascience_intake", "compiled": true, "compiled_code": "\n\nwith raw as (\n  select\n    id_no,\n    \"timestamp\" as submitted_at,\n    age_range,\n    gender,\n    country,\n    referral_source,\n    years_experience,\n    track,\n    weekly_commitment,\n    main_aim,\n    motivation,\n    skill_level,\n    aptitude_test_completed,\n    total_score,\n    graduated\n  from \"postgres\".\"raw\".\"raw_datascience_intake\"\n),\n\ncleaned as (\n  select\n    id_no,\n    submitted_at,\n    \n    -- Standardize age_range\n    case \n      when trim(lower(age_range)) like '%18-24%' then '18-24'\n      when trim(lower(age_range)) like '%25-34%' then '25-34'\n      when trim(lower(age_range)) like '%35-44%' then '35-44'\n      when trim(lower(age_range)) like '%45-54%' then '45-54'\n      when trim(lower(age_range)) like '%55%' then '55+'\n      else trim(age_range)\n    end as age_range,\n    \n    -- Standardize gender\n    case \n      when trim(lower(gender)) in ('male', 'm') then 'Male'\n      when trim(lower(gender)) in ('female', 'f') then 'Female'\n      when trim(lower(gender)) in ('other', 'prefer not to say', 'non-binary') then 'Other'\n      else nullif(trim(gender), '')\n    end as gender,\n    \n    -- Clean country\n    initcap(nullif(trim(country), '')) as country,\n    \n    -- Standardize referral_source\n    case \n      when trim(lower(referral_source)) like '%word of mouth%' then 'Word of Mouth'\n      when trim(lower(referral_source)) like '%whatsapp%' then 'WhatsApp'\n      when trim(lower(referral_source)) like '%facebook%' then 'Facebook'\n      when trim(lower(referral_source)) like '%instagram%' then 'Instagram'\n      when trim(lower(referral_source)) like '%linkedin%' then 'LinkedIn'\n      when trim(lower(referral_source)) like '%google%' then 'Google Search'\n      when trim(lower(referral_source)) like '%website%' then 'Website'\n      when trim(lower(referral_source)) like '%email%' then 'Email'\n      else initcap(nullif(trim(referral_source), ''))\n    end as referral_source,\n    \n    -- Categorize years_experience into ordinal values\n    case \n      when trim(lower(years_experience)) like '%less than%six months%' or \n           trim(lower(years_experience)) like '%0-6 months%' or\n           trim(lower(years_experience)) = 'none' then 'Less than 6 months'\n      when trim(lower(years_experience)) like '%6 months%1 year%' or\n           trim(lower(years_experience)) like '%6-12 months%' then '6 months - 1 year'\n      when trim(lower(years_experience)) like '%1-2 year%' or\n           trim(lower(years_experience)) like '%1 to 2 year%' then '1-2 years'\n      when trim(lower(years_experience)) like '%2-3 year%' or\n           trim(lower(years_experience)) like '%2 to 3 year%' then '2-3 years'\n      when trim(lower(years_experience)) like '%3-5 year%' or\n           trim(lower(years_experience)) like '%3 to 5 year%' then '3-5 years'\n      when trim(lower(years_experience)) like '%more than 5%' or\n           trim(lower(years_experience)) like '%5+ year%' or\n           trim(lower(years_experience)) like '%over 5%' then '5+ years'\n      else trim(years_experience)\n    end as years_experience,\n    \n    -- Standardize track\n    case \n      when trim(lower(track)) like '%data science%' then 'Data Science'\n      when trim(lower(track)) like '%data analytics%' then 'Data Analytics'\n      when trim(lower(track)) like '%machine learning%' then 'Machine Learning'\n      when trim(lower(track)) like '%ai%' or trim(lower(track)) like '%artificial intelligence%' then 'AI'\n      else initcap(nullif(trim(track), ''))\n    end as track,\n    \n    -- Categorize weekly_commitment into ordinal values\n    case \n      when trim(lower(weekly_commitment)) like '%less than%6%' or\n           trim(lower(weekly_commitment)) like '%under 6%' or\n           trim(lower(weekly_commitment)) like '%0-6%' then 'Less than 6 hours'\n      when trim(lower(weekly_commitment)) like '%6-10%' or\n           trim(lower(weekly_commitment)) like '%6 to 10%' then '6-10 hours'\n      when trim(lower(weekly_commitment)) like '%10-14%' or\n           trim(lower(weekly_commitment)) like '%10 to 14%' then '10-14 hours'\n      when trim(lower(weekly_commitment)) like '%more than 14%' or\n           trim(lower(weekly_commitment)) like '%over 14%' or\n           trim(lower(weekly_commitment)) like '%14+%' then 'More than 14 hours'\n      else trim(weekly_commitment)\n    end as weekly_commitment,\n    \n    -- Standardize main_aim\n    case \n      when trim(lower(main_aim)) like '%upskill%' then 'Upskill'\n      when trim(lower(main_aim)) like '%career change%' then 'Career Change'\n      when trim(lower(main_aim)) like '%new career%' then 'Career Change'\n      when trim(lower(main_aim)) like '%promotion%' then 'Career Advancement'\n      when trim(lower(main_aim)) like '%advance%' then 'Career Advancement'\n      when trim(lower(main_aim)) like '%start%business%' then 'Start Business'\n      when trim(lower(main_aim)) like '%freelanc%' then 'Freelancing'\n      else initcap(nullif(trim(main_aim), ''))\n    end as main_aim,\n    \n    -- Clean motivation (keep as is but trim)\n    nullif(trim(motivation), '') as motivation,\n    \n    -- Standardize skill_level into snake_case categories\n    case \n      when trim(lower(skill_level)) like '%beginner%' or\n           trim(lower(skill_level)) like '%no%experience%' or\n           trim(lower(skill_level)) like '%no learning%' then 'beginner'\n      when trim(lower(skill_level)) like '%elementary%' or\n           trim(lower(skill_level)) like '%basic%' or\n           trim(lower(skill_level)) like '%theoretical%' then 'elementary'\n      when trim(lower(skill_level)) like '%intermediate%' or\n           trim(lower(skill_level)) like '%some experience%' then 'intermediate'\n      when trim(lower(skill_level)) like '%advanced%' or\n           trim(lower(skill_level)) like '%expert%' then 'advanced'\n      else lower(replace(trim(skill_level), ' ', '_'))\n    end as skill_level,\n    \n    -- aptitude_test_completed is already text, clean it properly\n    case\n      when trim(lower(aptitude_test_completed)) in ('yes', 'true', '1', 'completed', 'done') then true\n      when trim(lower(aptitude_test_completed)) in ('no', 'false', '0', 'not completed', 'pending') then false\n      else null\n    end as aptitude_test_completed,\n    \n    -- total_score is already numeric, just ensure it's within reasonable bounds\n    case \n      when total_score >= 0 and total_score <= 100 then round(total_score::numeric, 2)\n      else null\n    end as total_score,\n    \n    -- graduated is already boolean, keep as is\n    coalesce(graduated, false) as graduated\n\n  from raw\n)\n\nselect * from cleaned", "relation_name": "\"postgres\".\"analytics\".\"stg_datascience_intake\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.292028Z", "completed_at": "2025-09-12T03:21:44.306300Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.306938Z", "completed_at": "2025-09-12T03:21:44.306953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016388416290283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_stg_dataanalyst_intake_id_no.a401c9cd55", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_no\nfrom \"postgres\".\"analytics\".\"stg_dataanalyst_intake\"\nwhere id_no is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.309783Z", "completed_at": "2025-09-12T03:21:44.315093Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.315746Z", "completed_at": "2025-09-12T03:21:44.315761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007191181182861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_stg_dataanalyst_intake_submitted_at.9895c3a861", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect submitted_at\nfrom \"postgres\".\"analytics\".\"stg_dataanalyst_intake\"\nwhere submitted_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.318169Z", "completed_at": "2025-09-12T03:21:44.323186Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.324077Z", "completed_at": "2025-09-12T03:21:44.324092Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007080078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.dim_applicant_demographics", "compiled": true, "compiled_code": "\n\nwith unified as (\n    select\n        id_no,\n        age_range,\n        gender,\n        country,\n        track as track_type\n    from \"postgres\".\"analytics\".\"stg_datascience_intake\"\n    union all\n    select\n        id_no,\n        age_range,\n        gender,\n        country,\n        track as track_type\n    from \"postgres\".\"analytics\".\"stg_dataanalyst_intake\"\n)\n\nselect\n    id_no,\n    age_range,\n    gender,\n    country,\n    track_type\nfrom unified", "relation_name": "\"postgres\".\"analytics\".\"dim_applicant_demographics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.328327Z", "completed_at": "2025-09-12T03:21:44.333890Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.335415Z", "completed_at": "2025-09-12T03:21:44.335445Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009432554244995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.fact_application_details", "compiled": true, "compiled_code": "\n\nwith base as (\n    select * from \"postgres\".\"analytics\".\"stg_datascience_intake\"\n    union all\n    select * from \"postgres\".\"analytics\".\"stg_dataanalyst_intake\"\n)\n\nselect\n    id_no,\n    track,\n    referral_source,\n    weekly_commitment,\n    main_aim,\n    motivation,\n    skill_level,\n    aptitude_test_completed\nfrom base", "relation_name": "\"postgres\".\"analytics\".\"fact_application_details\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.340974Z", "completed_at": "2025-09-12T03:21:44.346026Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.346844Z", "completed_at": "2025-09-12T03:21:44.346857Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008800983428955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.fact_performance_metrics", "compiled": true, "compiled_code": "\n\nwith base as (\n    select * from \"postgres\".\"analytics\".\"stg_datascience_intake\"\n    union all\n    select * from \"postgres\".\"analytics\".\"stg_dataanalyst_intake\"\n)\n\nselect\n    id_no,\n    track,\n    total_score,\n    graduated,\n    case when graduated = true then 1 else 0 end as graduation_flag\nfrom base", "relation_name": "\"postgres\".\"analytics\".\"fact_performance_metrics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.352091Z", "completed_at": "2025-09-12T03:21:44.358290Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.359466Z", "completed_at": "2025-09-12T03:21:44.359482Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010261058807373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.unified_intake", "compiled": true, "compiled_code": "\n\nwith ds as (\n  select *, 'Data Science' as track_type\n  from \"postgres\".\"analytics\".\"stg_datascience_intake\"\n),\n\nda as (\n  select *, 'Data Analyst' as track_type\n  from \"postgres\".\"analytics\".\"stg_dataanalyst_intake\"\n)\n\nselect\n  id_no,\n  submitted_at,\n  age_range,\n  gender,\n  country,\n  referral_source,\n  years_experience,\n  track,\n  weekly_commitment,\n  main_aim,\n  motivation,\n  skill_level,\n  aptitude_test_completed,\n  total_score,\n  graduated,\n  track_type\nfrom ds\n\nunion all\n\nselect\n  id_no,\n  submitted_at,\n  age_range,\n  gender,\n  country,\n  referral_source,\n  years_experience,\n  track,\n  weekly_commitment,\n  main_aim,\n  motivation,\n  skill_level,\n  aptitude_test_completed,\n  total_score,\n  graduated,\n  track_type\nfrom da", "relation_name": "\"postgres\".\"analytics\".\"unified_intake\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.364676Z", "completed_at": "2025-09-12T03:21:44.375265Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.376970Z", "completed_at": "2025-09-12T03:21:44.377187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014396190643310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_stg_datascience_intake_id_no.10939658b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_no\nfrom \"postgres\".\"analytics\".\"stg_datascience_intake\"\nwhere id_no is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.384455Z", "completed_at": "2025-09-12T03:21:44.391649Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.392476Z", "completed_at": "2025-09-12T03:21:44.392491Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011289358139038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_stg_datascience_intake_submitted_at.f9b571d24a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect submitted_at\nfrom \"postgres\".\"analytics\".\"stg_datascience_intake\"\nwhere submitted_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.399190Z", "completed_at": "2025-09-12T03:21:44.411515Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.415488Z", "completed_at": "2025-09-12T03:21:44.415580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019595861434936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_dim_applicant_demographics_id_no.70f3ee1965", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_no\nfrom \"postgres\".\"analytics\".\"dim_applicant_demographics\"\nwhere id_no is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.422644Z", "completed_at": "2025-09-12T03:21:44.442616Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.443932Z", "completed_at": "2025-09-12T03:21:44.443958Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023554563522338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.unique_dim_applicant_demographics_id_no.e8d3b7cce1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_no as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"analytics\".\"dim_applicant_demographics\"\nwhere id_no is not null\ngroup by id_no\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.459120Z", "completed_at": "2025-09-12T03:21:44.475812Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.476750Z", "completed_at": "2025-09-12T03:21:44.476770Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020331621170043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_fact_application_details_id_no.5b933cc0f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_no\nfrom \"postgres\".\"analytics\".\"fact_application_details\"\nwhere id_no is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.482184Z", "completed_at": "2025-09-12T03:21:44.491858Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.493327Z", "completed_at": "2025-09-12T03:21:44.493347Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01405191421508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_fact_performance_metrics_id_no.4c8d9b67c5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_no\nfrom \"postgres\".\"analytics\".\"fact_performance_metrics\"\nwhere id_no is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.498663Z", "completed_at": "2025-09-12T03:21:44.505435Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.506934Z", "completed_at": "2025-09-12T03:21:44.506961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01134634017944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.mart_recruitment_effectiveness", "compiled": true, "compiled_code": "\n\nselect\n  referral_source,\n  track_type,\n  count(*) as total_applicants,\n  avg(total_score) as avg_score,\n  sum(case when aptitude_test_completed then 1 else 0 end)::float / nullif(count(*),0) as completion_rate,\n  sum(case when graduated then 1 else 0 end)::float / nullif(count(*),0) as graduation_rate\nfrom \"postgres\".\"analytics\".\"unified_intake\"\ngroup by 1,2\norder by total_applicants desc", "relation_name": "\"postgres\".\"analytics\".\"mart_recruitment_effectiveness\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.512130Z", "completed_at": "2025-09-12T03:21:44.517004Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.518344Z", "completed_at": "2025-09-12T03:21:44.518360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007989883422851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.cohort_metrics.mart_total_intake_summary", "compiled": true, "compiled_code": "\n\nselect\n  track_type,\n  country,\n  age_range,\n  count(*) as total_applicants,\n  avg(total_score) as avg_score,\n  sum(case when aptitude_test_completed then 1 else 0 end)::float / nullif(count(*),0) as completion_rate,\n  sum(case when graduated then 1 else 0 end)::float / nullif(count(*),0) as graduation_rate\nfrom \"postgres\".\"analytics\".\"unified_intake\"\ngroup by 1,2,3", "relation_name": "\"postgres\".\"analytics\".\"mart_total_intake_summary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.522922Z", "completed_at": "2025-09-12T03:21:44.531001Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.532399Z", "completed_at": "2025-09-12T03:21:44.532420Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011356830596923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.not_null_unified_intake_id_no.e8bc507fa6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_no\nfrom \"postgres\".\"analytics\".\"unified_intake\"\nwhere id_no is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-12T03:21:44.537431Z", "completed_at": "2025-09-12T03:21:44.550349Z"}, {"name": "execute", "started_at": "2025-09-12T03:21:44.550906Z", "completed_at": "2025-09-12T03:21:44.550918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015170812606811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.cohort_metrics.unique_unified_intake_id_no.74f47fbbd2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_no as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"analytics\".\"unified_intake\"\nwhere id_no is not null\ngroup by id_no\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 3.8421831130981445, "args": {"show_resource_report": false, "log_format_file": "debug", "populate_cache": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "exclude": [], "log_file_max_bytes": 10485760, "static": false, "partial_parse": true, "require_resource_names_without_spaces": true, "which": "generate", "profiles_dir": ".", "project_dir": "/home/juma/everything-data-pipeline/cohort_metrics_everythingdata/dbt", "log_level": "info", "invocation_command": "dbt docs generate --profiles-dir .", "show_all_deprecations": false, "introspect": true, "upload_to_artifacts_ingest_api": false, "use_colors": true, "printer_width": 80, "favor_state": false, "log_level_file": "debug", "log_format": "default", "require_explicit_package_overrides_for_builtin_materializations": true, "require_nested_cumulative_type_params": false, "log_path": "/home/juma/everything-data-pipeline/cohort_metrics_everythingdata/dbt/logs", "source_freshness_run_project_hooks": true, "quiet": false, "require_yaml_configuration_for_mf_time_spines": false, "macro_debugging": false, "select": [], "send_anonymous_usage_stats": true, "empty_catalog": false, "state_modified_compare_more_unrendered_values": false, "version_check": true, "require_generic_test_arguments_property": true, "print": true, "compile": true, "defer": false, "validate_macro_args": false, "state_modified_compare_vars": false, "static_parser": true, "vars": {}, "indirect_selection": "eager", "partial_parse_file_diff": true, "require_all_warnings_handled_by_warn_error": false, "write_json": true, "require_batched_execution_for_custom_microbatch_strategy": false, "skip_nodes_if_on_run_start_fails": false, "strict_mode": false, "use_fast_test_edges": false, "use_colors_file": true, "cache_selected_only": false}}